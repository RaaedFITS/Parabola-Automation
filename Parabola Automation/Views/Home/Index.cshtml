@{
    ViewData["Title"] = "Home Page";
}

<div class="container mt-5">
    <h2>Welcome!</h2>
    <h3>Associated Names:</h3>
    <ul>
        @if (ViewBag.Names != null)
        {
            foreach (var name in ViewBag.Names)
            {
                <li>@name</li>
            }
        }
        else
        {
            <p>No associated names found.</p>
        }
    </ul>
</div>

<div class="container mt-5">
    <div class="text-center">
        <h1 class="display-4 mb-4">Welcome</h1>
        <p class="mb-4">Learn about <a href="https://learn.microsoft.com/aspnet/core" target="_blank">building Web apps with ASP.NET Core</a>.</p>
    </div>

    <div class="card">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Upload Your CSV or Excel File</h5>
        </div>
        <div class="card-body">
            <!-- Dropdown for selecting the flow -->
            <div class="mb-3">
                <label for="flowSelection" class="form-label">Select the Flow:</label>
                <select class="form-select" id="flowSelection">
                    <option selected disabled>Choose a name</option>
                    @if (ViewBag.Names != null)
                    {
                        foreach (var name in ViewBag.Names)
                        {
                            <option value="@name">@name</option>
                        }
                    }
                </select>
            </div>


            <!-- OK button to trigger the Python code -->
            <div class="mb-3">
                <button class="btn btn-success" id="okButton" disabled>OK</button>
            </div>

            <!-- Drag-and-drop area for CSV/Excel file upload -->
            <div id="dropzone" class="border border-primary rounded p-4 text-center" style="background-color: #f8f9fa;">
                <p class="mb-2">Drag and drop your CSV or Excel file here</p>
                <p class="text-muted">or</p>
                <button class="btn btn-primary" id="filePickerButton">Choose File</button>
                <input type="file" id="fileInput" accept=".csv, .xlsx, .xls" class="d-none">
            </div>

            <!-- Feedback for the uploaded file -->
            <div id="fileName" class="mt-3 text-muted">No file selected.</div>

            <!-- Upload Button -->
            <div class="mt-3">
                <button class="btn btn-primary" id="uploadButton" disabled>Upload</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const flowSelection = document.getElementById('flowSelection');
        const okButton = document.getElementById('okButton');
        const fileInput = document.getElementById('fileInput');
        const filePickerButton = document.getElementById('filePickerButton');
        const dropzone = document.getElementById('dropzone');
        const fileNameDisplay = document.getElementById('fileName');

        let selectedFile = null;

      

        // Enable OK button only when both a file and a flow are selected
        function updateOkButtonState() {
            okButton.disabled = !selectedFile || !flowSelection.value || flowSelection.value === "Choose a flow";
        }

        flowSelection.addEventListener('change', updateOkButtonState);

        filePickerButton.addEventListener('click', () => fileInput.click());

        fileInput.addEventListener('change', (event) => {
            selectedFile = event.target.files[0];
            if (selectedFile) {
                fileNameDisplay.textContent = `Selected file: ${selectedFile.name}`;
            } else {
                fileNameDisplay.textContent = 'No file selected.';
            }
            updateOkButtonState();
        });

        dropzone.addEventListener('dragover', (event) => {
            event.preventDefault();
            dropzone.classList.add('border-success');
        });

        dropzone.addEventListener('dragleave', () => {
            dropzone.classList.remove('border-success');
        });

        dropzone.addEventListener('drop', (event) => {
            event.preventDefault();
            dropzone.classList.remove('border-success');

            const file = event.dataTransfer.files[0];
            if (file && (file.type === 'text/csv' || file.name.endsWith('.xls') || file.name.endsWith('.xlsx'))) {
                selectedFile = file;
                fileNameDisplay.textContent = `Selected file: ${file.name}`;
            } else {
                selectedFile = null;
                fileNameDisplay.textContent = 'Please upload a valid CSV or Excel file.';
            }
            updateOkButtonState();
        });

            okButton.addEventListener('click', async function () {
        const selectedFlow = flowSelection.value;

        if (!selectedFile || !selectedFlow || selectedFlow === "Choose a flow") {
            alert('Please select both a file and a flow.');
            return;
        }

        const formData = new FormData();
        formData.append('file', selectedFile);
        formData.append('flowName', selectedFlow);

        const loadingScreen = document.getElementById('loadingScreen');
        loadingScreen.style.display = 'flex'; // Show the loading screen

        try {
            const response = await fetch('/Home/TriggerPython', {
                method: 'POST',
                body: formData
            });

            if (!response.ok) throw new Error('Failed to trigger Python script');
            const result = await response.json();
            alert(result.message);
        } catch (error) {
            console.error('Error triggering Python script:', error);
            alert('Failed to trigger Python script.');
        } finally {
            loadingScreen.style.display = 'none'; // Hide the loading screen
        }
    });


      
    });

</script>


<!-- Loading screen -->
<div id="loadingScreen" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); z-index: 9999; justify-content: center; align-items: center; color: white; font-size: 1.5rem;">
    Processing your request...
</div>


