@{
    ViewData["Title"] = "Home Page";
}

<div class="container mt-5">
    <div class="text-center">
        <h1 class="display-4 mb-4">Parabola Automation</h1>

    </div>

    <div class="card shadow-lg">
        <div class="card-header bg-primary text-white text-center">
            <h5 class="mb-0">Upload Your CSV or Excel File</h5>
        </div>
        <div class="card-body">
            <!-- Dropdown for selecting the flow -->
            <div class="mb-4">
                <label for="flowSelection" class="form-label fw-bold">Select the Flow:</label>
                <select class="form-select" id="flowSelection">
                    <option selected disabled>Choose a name</option>
                    @if (ViewBag.Names != null)
                    {
                        foreach (var name in ViewBag.Names)
                        {
                            <option value="@name">@name</option>
                        }
                    }
                </select>
            </div>

            <!-- Drag-and-drop area for CSV/Excel file upload -->
            <div id="dropzone" class="border border-primary rounded p-4 text-center" style="background-color: #f8f9fa;">
                <p class="mb-2 fw-bold">Drag and drop your CSV or Excel file here</p>
                <p class="text-muted">or</p>
                <button class="btn btn-primary" id="filePickerButton">Choose File</button>
                <input type="file" id="fileInput" accept=".csv, .xlsx, .xls" class="d-none">
            </div>

            <!-- Feedback for the uploaded file -->
            <div id="fileName" class="mt-3 text-muted">No file selected.</div>

            <!-- OK button to trigger the Python code -->
            <div class="mt-4 text-center">
                <button class="btn btn-success btn-lg px-4" id="okButton" disabled>OK</button>
            </div>
        </div>
    </div>

    <!-- Alert Messages -->
    <div id="alertContainer" class="mt-4"></div>
</div>

<!-- Loading Screen -->
<div id="loadingScreen" class="d-none justify-content-center align-items-center" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); z-index: 9999;">
    <div class="text-center text-white">
        <div class="spinner-border text-light mb-3" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p id="loadingMessage" class="fs-5 mb-3">Processing your request...</p>
        <button id="cancelButton" class="btn btn-danger">Cancel</button>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const flowSelection = document.getElementById('flowSelection');
        const okButton = document.getElementById('okButton');
        const fileInput = document.getElementById('fileInput');
        const filePickerButton = document.getElementById('filePickerButton');
        const dropzone = document.getElementById('dropzone');
        const fileNameDisplay = document.getElementById('fileName');
        const loadingScreen = document.getElementById('loadingScreen');
        const loadingMessage = document.getElementById('loadingMessage');
        const alertContainer = document.getElementById('alertContainer');
        const cancelButton = document.getElementById('cancelButton');

        let selectedFile = null;

        // Ensure the loading screen is hidden when the page loads
        loadingScreen.classList.add('d-none');

        // Enable OK button only when both a file and a flow are selected
        function updateOkButtonState() {
            okButton.disabled = !selectedFile || !flowSelection.value || flowSelection.value === "Choose a flow";
        }

        function showAlert(message, type) {
            alertContainer.innerHTML = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
        }

        flowSelection.addEventListener('change', updateOkButtonState);

        filePickerButton.addEventListener('click', () => fileInput.click());

        fileInput.addEventListener('change', (event) => {
            selectedFile = event.target.files[0];
            if (selectedFile) {
                fileNameDisplay.textContent = `Selected file: ${selectedFile.name}`;
            } else {
                fileNameDisplay.textContent = 'No file selected.';
            }
            updateOkButtonState();
        });

        dropzone.addEventListener('dragover', (event) => {
            event.preventDefault();
            dropzone.classList.add('border-success');
        });

        dropzone.addEventListener('dragleave', () => {
            dropzone.classList.remove('border-success');
        });

        dropzone.addEventListener('drop', (event) => {
            event.preventDefault();
            dropzone.classList.remove('border-success');

            const file = event.dataTransfer.files[0];
            if (file && (file.type === 'text/csv' || file.name.endsWith('.xls') || file.name.endsWith('.xlsx'))) {
                selectedFile = file;
                fileNameDisplay.textContent = `Selected file: ${file.name}`;
            } else {
                selectedFile = null;
                fileNameDisplay.textContent = 'Please upload a valid CSV or Excel file.';
            }
            updateOkButtonState();
        });

        okButton.addEventListener('click', async function () {
            const selectedFlow = flowSelection.value;

            if (!selectedFile || !selectedFlow || selectedFlow === "Choose a flow") {
                showAlert('Please select both a file and a flow.', 'warning');
                return;
            }

            const formData = new FormData();
            formData.append('file', selectedFile);
            formData.append('flowName', selectedFlow);

            try {
                loadingMessage.textContent = 'Logging in to Parabola...';
                loadingScreen.classList.remove('d-none');
                loadingScreen.style.display = 'flex';

                const response = await fetch('/Home/TriggerPython', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) throw new Error('Failed to trigger Python script');

                loadingMessage.textContent = 'Running flow...';

                const result = await response.json();
                showAlert(result.message, 'success');
            } catch (error) {
                console.error('Error triggering Python script:', error);
                showAlert('Failed to trigger Python script.', 'danger');
            } finally {
                loadingScreen.classList.add('d-none');
            }
        });

        cancelButton.addEventListener('click', async function () {
            try {
                loadingScreen.classList.remove('d-none');
                loadingMessage.textContent = 'Cancelling operation...';

                const response = await fetch('/Home/CancelPythonScript', {
                    method: 'POST'
                });

                if (!response.ok) throw new Error('Failed to cancel Python script');

                const result = await response.json();
                showAlert(result.message, 'info');
            } catch (error) {
                console.error('Error cancelling Python script:', error);
                showAlert('Failed to cancel Python script.', 'danger');
            } finally {
                loadingScreen.classList.add('d-none');
            }
        });
    });
</script>
